name: Start Review App for Pull Request
on:
#   pull_request:
#     branches: [ dev ]
  push:
    branches:
    - feature/*
    paths-ignore:
      - ".github/workflows/**"
env:
  IMAGE_NAME: ergrassa/devops-test-app
  PROJECT_PATH: ~/devops-test/monday    
jobs:
  build:
    environment: staging
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2    
    - 
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      uses: docker/login-action@v1
      name: Dockerhub login
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}      
    - 
      name: Extract branch name
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo ${GITHUB_REF#refs/heads/}
        echo "##[set-output name=feature;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/')"
        echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/'
      id: extract_branch
      # аутпут branch - имя ветки вида feature/name
      # аутпут feature - имя ветки вида feature-name
    - 
      uses: docker/build-push-action@v2
      name: Build and push dockerimage
      with:
        context: ./monday/app
        push: true
        tags: ${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.feature }}
        file: ./monday/app/Dockerfile

    - 
      name: SSH deploy
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ env.SSH_HOST }}
        username: ${{ env.SSH_USER }}
        key: ${{ env.SSH_KEY }}
        script: |
          echo ${{ steps.extract_branch.outputs.feature }}

          # создать папку
          cd ~/devops-test/monday/review
          mkdir -p ${{ steps.extract_branch.outputs.feature }}
          cd ${{ steps.extract_branch.outputs.feature }}
          
          # компоуз из шаблона
          cp ~/devops-test/monday/docker-compose.review.yaml ./
          sed -i 's/_feature_/${{ steps.extract_branch.outputs.feature }}/' ./docker-compose.review.yaml

          docker pull ${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.feature }}
          
          # если нет сетки, то создать и подключить к прокси, if-else вариант
          if docker network inspect net-${{ steps.extract_branch.outputs.feature }} > /dev/null 2>&1; then
            echo "Network exists, doing nothing"
          else 
            echo "No network net-${{ steps.extract_branch.outputs.feature }}, creating and connecting to proxy"
            docker network create net-${{ steps.extract_branch.outputs.feature }} -d bridge
            docker network connect net-${{ steps.extract_branch.outputs.feature }} nginx-proxy-ngp-1
          fi

          # поехали!
          docker-compose -f docker-compose.review.yaml -p ${{ steps.extract_branch.outputs.feature }} up -d

# # если нет сетки, то создать и подключить к прокси
# # многострочник, пайп || выполняется, если первая команда завершена с ошибкой
# docker network inspect net-${{ steps.extract_branch.outputs.feature }} || \
# docker network create net-${{ steps.extract_branch.outputs.feature }} -d bridge && \
# docker network connect net-${{ steps.extract_branch.outputs.feature }} nginx-proxy-ngp-1