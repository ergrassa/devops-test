name: Start Review App
on:
  workflow_dispatch:
jobs:

# получает бранч нейм, эта джоба должна быть в needs
  branchname:
    runs-on: ubuntu-latest
    outputs:
      feature: ${{ steps.extract_branch.outputs.feature }}
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
    - 
      name: Extract branch name
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo ${GITHUB_REF#refs/heads/}
        echo "##[set-output name=feature;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/')"
        echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/'
      id: extract_branch
# call by
# ${{ needs.branchname.outputs.feature }} for feature-branch or hotfix-fix or whatever
# ${{ needs.branchname.outputs.branch }} for feature/name or support/helpme

# деплой ↓↓↓
  deploy:
    name: Deploy
    needs: [branchname]
    runs-on: ubuntu-latest
    env:
      # переменные
      T_FEATURE: _feature_ # строка поиска в шаблоне для замены на feature-name
      T_BRANCH: _branch_ # строка поиска в шаблоне для замены на feature/name
      T_VHOST_FRONTEND: _fronthost_ # строка поиска в шаблоне для замены на $VHOST_FRONTEND
      T_VHOST_BACKEND: _backhost_ # # строка поиска в шаблоне для замены на $VHOST_BACKEND
      T_NETNAME: _netname_ # строка поиска в шаблоне для замены на $NETNAME
      T_PROXYNAME: _proxy_ # строка поиска в шаблоне для замены на $PROXYNAME
      TEMPLATE: lms.review-template.yml # файл шаблона
      FILE: lms.review.yml # компоуз-файл фичи
      NETNAME: lms-${{ needs.branchname.outputs.feature }} # имя сети с feature-name
      PROXYNAME: nginx-proxy-ngp-1 # имя контейнера с прокси
      VHOST_FRONTEND: frontend.foo.local
      VHOST_BACKEND: backend.foo.local
      # 
      FEATURE: ${{ needs.branchname.outputs.feature }} # feature-name
      BRANCH: ${{ needs.branchname.outputs.branch }} # feature/name



    steps:

    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        password: ${{ secrets.STAGING_PASSWORD }}
        script: |
          # создание папки и правка из шаблона
          mkdir -p ~/deploy/${{ env.FEATURE }}
          cd ~/deploy/${{ env.FEATURE }}
          cp ~/${{ env.TEMPLATE }} ./${{ env.FILE }}
          sed -i 's/${{ env.T_FEATURE }}/${{ env.FEATURE }}/' ./${{ env.FILE }}
          sed -i 's/${{ env.T_BRANCH }}/${{ env.BRANCH }}/' ./${{ env.FILE }}
          sed -i 's/${{ env.T_VHOST_FRONTEND }}/${{ env.VHOST_FRONTEND }}/' ./${{ env.FILE }}
          sed -i 's/${{ env.T_VHOST_BACKEND }}/${{ env.VHOST_BACKEND }}/' ./${{ env.FILE }}
          sed -i 's/${{ env.T_NETNAME }}/${{ env.NETNAME }}/' ./${{ env.FILE }}
          sed -i 's/${{ env.T_PROXYNAME }}/${{ env.PROXYNAME }}/' ./${{ env.FILE }}          

          # докерхаб
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker pull centergamedev/lms-backend:${{ env.FEATURE }}
          docker pull centergamedev/lms-frontend:${{ env.FEATURE }}
          export TAG=${{ env.FEATURE }}

          # если нет сетки, то создать и подключить к прокси, if-else вариант
          if docker network inspect ${{ env.NETNAME }} > /dev/null 2>&1; then
            echo "Network exists, doing nothing"
          else 
            echo "No network ${{ env.NETNAME }}, creating and connecting to proxy"
            docker network create ${{ env.NETNAME }} -d bridge
            docker network connect ${{ env.NETNAME }} ${{ env.PROXYNAME }}
          fi
