# This is a basic workflow to help you get started with Actions

name: Get branch name and test

# Controls when the workflow will run
on:
  workflow_dispatch:

jobs:
  branchname:
    runs-on: ubuntu-latest
    outputs:
      feature: ${{ steps.extract_branch.outputs.feature }}
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
    - 
      name: Extract branch name
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo ${GITHUB_REF#refs/heads/}
        echo "##[set-output name=feature;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/')"
        echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/'
      id: extract_branch
      
  echo:
    needs: branchname
    runs-on: ubuntu-latest
    env:
      T_FEATURE: _feature_ # строка поиска в шаблоне для замены на feature-name
      T_BRANCH: _branch_ # строка поиска в шаблоне для замены на feature/name
      T_FILE: lms.review-template.yml # файл шаблона
      FILE: lms.review.yml # компоуз-файл фичи
      FEATURE: ${{ needs.branchname.outputs.feature }} # feature-name
      BRANCH: ${{ needs.branchname.outputs.branch }} # feature/name
      NETNAME: lms-${{ needs.branchname.outputs.feature }} # имя сети с feature-name
      PROXYNAME: nginx-proxy-ngp-1 # имя контейнера с прокси
    steps:
    -
      name: echo
      shell: bash
      run: |
        echo ${{ env.T_FEATURE }}
        echo ${{ env.T_BRANCH }}
        echo ${{ env.T_FILE }}
        echo ${{ env.FILE }}
        echo ${{ env.FEATURE }}
        echo ${{ env.BRANCH }}
        echo ${{ env.NETNAME }}
        echo ${{ env.PROXYNAME }}
        cat << EOF
        # создание папки и правка из шаблона
        mkdir -p ~/deploy/${{ env.FEATURE }}
        cd ~/deploy/${{ env.FEATURE }}
        cp ~/${{ env.T_FILE }} ./${{ env.FILE }}
        sed -i 's/${{ env.T_FEATURE }}/${{ env.FEATURE }}/' ./${{ env.FILE }}
        sed -i 's/${{ env.T_BRANCH }}/${{ env.BRANCH }}/' ./${{ env.FILE }}

        # докерхаб
        docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
        docker pull centergamedev/lms-backend:${{ env.FEATURE }}
        docker pull centergamedev/lms-frontend:${{ env.FEATURE }}
        export TAG=${{ env.FEATURE }}

        # если нет сетки, то создать и подключить к прокси, if-else вариант
        if docker network inspect ${{ env.NETNAME }} > /dev/null 2>&1; then
          echo "Network exists, doing nothing"
        else 
          echo "No network ${{ env.NETNAME }}, creating and connecting to proxy"
          docker network create ${{ env.NETNAME }} -d bridge
          docker network connect ${{ env.NETNAME }} ${{ env.PROXYNAME }}
        fi

        # поехали!
        docker-compose -f ~/deploy/${{ env.FEATURE }}/${{ env.FILE }} -p ${{ env.FEATURE }} up -d
        EOF
